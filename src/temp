Server::Server(std::map<std::string, ServerBlock>& serverBlocks)
    : _server_blocks(serverBlocks)
{
    kq = kqueue();
    if (kq < 0) {
        throw std::runtime_error("kqueue creation failed");
    }
    setupListeningSockets();
}

Server::~Server() {
    for (auto& kv : serverSockets) {
        close(kv.first);
    }
    close(kq);
    std::cout << "Server Destroyed\n";
}

void Server::setupListeningSockets() {
    for (auto& kv : _server_blocks) {
        const std::string& portStr = kv.first;
        int port = std::stoi(portStr);

        int serverSock = socket(AF_INET, SOCK_STREAM, 0);
        if (serverSock < 0) throw std::runtime_error("Socket creation failed");

        int flags = fcntl(serverSock, F_GETFL, 0);
        if (flags < 0 || fcntl(serverSock, F_SETFL, flags | O_NONBLOCK) < 0)
            throw std::runtime_error("Failed to set non-blocking mode");

        int opt = 1;
        if (setsockopt(serverSock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0)
            throw std::runtime_error("Failed to set socket options");

        sockaddr_in serverAddr{};
        serverAddr.sin_family = AF_INET;
        serverAddr.sin_port = htons(port);
        serverAddr.sin_addr.s_addr = INADDR_ANY;

        if (bind(serverSock, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0)
            throw std::runtime_error("Bind failed on port " + portStr);

        if (listen(serverSock, 5) < 0)
            throw std::runtime_error("Listen failed on port " + portStr);

        // Register the server socket with kqueue for reading
        registerEvent(serverSock, EVFILT_READ, EV_ADD | EV_ENABLE);

        // Store the server socket and its port
        serverSockets[serverSock] = portStr;
    }
}